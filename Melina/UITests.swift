// Generated by Melina.

import XCTest

final class MelinaUITests: XCTestCase {

    func testFirstScenario() {
        let app = launchApp([
            "experiment":"NewExperiment",
        ])
        let label_1 = app.staticTexts["Label_2"].firstMatch
        waitForExistenceIfNeeded(label_1)
        XCTAssertFalse(label_1.isSelected)
        let view_2 = app.otherElements["View_2"].firstMatch
        waitForExistenceIfNeeded(view_2)
        XCTAssertFalse(view_2.isSelected)
        let view_3 = app.otherElements["View_2"].firstMatch
        waitForExistenceIfNeeded(view_3)
        XCTAssertTrue(view_3.isSelected)
        let view_4 = app.otherElements["View_2"].firstMatch
        waitForExistenceIfNeeded(view_4)
        let view_5 = app.otherElements["View_2"].firstMatch
        waitForDisappear(view_5)
        let view_6 = app.otherElements["View_2"].firstMatch
        waitForExistenceIfNeeded(view_6)
        XCTAssertEqual(view_6.value as? String, "Hello")
        let button_7 = app.buttons["Button 4"].firstMatch
        waitForExistenceIfNeeded(button_7)
        button_7.tap()
        let textField_8 = app.textFields["Text 1"].firstMatch
        waitForExistenceIfNeeded(textField_8)
        textField_8.tap()
        textField_8.typeText("Hello world")
        self.login(app)
    }

}

fileprivate extension XCTestCase {
    func login(_ app: XCUIApplication) {
        let button_1 = app.buttons["Button 1"].firstMatch
        waitForExistenceIfNeeded(button_1)
        button_1.tap()
        let view_2 = app.otherElements["View_2"].firstMatch
        waitForExistenceIfNeeded(view_2)
        XCTAssertEqual(view_2.value as? String, "Hello")
    }
}

fileprivate extension XCTestCase {
    func launchApp(_ launchEnvironment: [String : String]) -> XCUIApplication {
        continueAfterFailure = false
        let app = XCUIApplication()
        app.launchEnvironment = launchEnvironment
        app.launch()
        return app
    }
}
fileprivate extension XCTestCase {
    func waitForExistenceIfNeeded(_ element: XCUIElement) {
        if !element.exists {
            XCTAssertTrue(element.waitForExistence(timeout: 5))
        }
    }
}
fileprivate extension XCTestCase {
    func waitForDisappear(_ element: XCUIElement) {
        let doesNotExistPredicate = NSPredicate(format: "exists == false")
        expectation(for: doesNotExistPredicate, evaluatedWith: element, handler: nil)
        waitForExpectations(timeout: 5) { error in
            if error != nil {
                XCTFail("The element did not disappear")
            }
        }
    }
}
